// https://www.shadertoy.com/view/4tSBDR
#version 330 core

layout (location = 0) out vec4 fragColor;

uniform sampler2D fbTex;
uniform sampler2D ppTex;
uniform vec3 screenResolution;

in vec2 uv;

#define PIXEL_SIZE 2.0
#define PALETTE_SIZE 53

// The input color is quantized to the nearest of these.
vec3 PALETTE_IN[PALETTE_SIZE] = vec3[](
    vec3(0.000000, 0.000000, 0.000000),
    vec3(1.000000, 1.000000, 1.000000),
    vec3(1.000000, 1.000000, 0.196078),
    vec3(1.000000, 0.925490, 0.000000),
    vec3(1.000000, 0.764706, 0.000000),
    vec3(0.925490, 0.552941, 0.000000),
    vec3(0.764706, 0.392157, 0.000000),
    vec3(0.650980, 0.239216, 0.000000),
    vec3(0.556863, 0.000000, 0.000000),
    vec3(0.356863, 0.000000, 0.000000),
    vec3(0.360784, 0.400000, 0.466667),
    vec3(0.486275, 0.631373, 0.647059),
    vec3(0.541176, 0.768627, 0.756863),
    vec3(0.168627, 0.184314, 0.215686),
    vec3(0.286275, 0.317647, 0.368627),
    vec3(1.000000, 0.870588, 1.000000),
    vec3(1.000000, 0.639216, 1.000000),
    vec3(0.568627, 0.501961, 0.737255),
    vec3(0.564706, 0.364706, 0.737255),
    vec3(0.498039, 0.066667, 0.686275),
    vec3(0.305882, 0.062745, 0.431373),
    vec3(0.176471, 0.062745, 0.239216),
    vec3(1.000000, 0.082353, 1.000000),
    vec3(0.560784, 0.156863, 0.560784),
    vec3(0.380392, 0.200000, 0.380392),
    vec3(1.000000, 0.309804, 1.000000),
    vec3(1.000000, 0.698039, 1.000000),
    vec3(0.000000, 0.047059, 0.223529),
    vec3(0.000000, 0.058824, 0.286275),
    vec3(0.000000, 0.113725, 0.560784),
    vec3(0.000000, 0.168627, 0.831373),
    vec3(0.000000, 0.243137, 1.000000),
    vec3(0.000000, 0.341176, 1.000000),
    vec3(0.000000, 0.541176, 1.000000),
    vec3(0.000000, 0.823529, 1.000000),
    vec3(0.000000, 1.000000, 1.000000),
    vec3(0.023529, 0.968627, 1.000000),
    vec3(0.023529, 0.768627, 1.000000),
    vec3(0.023529, 0.600000, 1.000000),
    vec3(0.019608, 0.427451, 1.000000),
    vec3(0.015686, 0.309804, 0.925490),
    vec3(0.015686, 0.270588, 0.878431),
    vec3(0.015686, 0.211765, 0.803922),
    vec3(0.019608, 1.000000, 0.882353),
    vec3(0.019608, 1.000000, 0.627451),
    vec3(0.019608, 1.000000, 0.505882),
    vec3(0.019608, 1.000000, 0.396078),
    vec3(0.015686, 1.000000, 0.282353),
    vec3(0.015686, 1.000000, 0.211765),
    vec3(0.023529, 0.913725, 0.635294),
    vec3(0.019608, 0.776471, 0.443137),
    vec3(0.015686, 0.682353, 0.345098),
    vec3(0.015686, 0.560784, 0.219608)
);

// The quantized color is mapped to this output color.
vec3 PALETTE_OUT[PALETTE_SIZE] = vec3[](
    vec3(0.000000, 0.000000, 0.000000),
    vec3(1.000000, 1.000000, 1.000000),
    vec3(1.000000, 1.000000, 0.196078),
    vec3(1.000000, 0.925490, 0.000000),
    vec3(1.000000, 0.764706, 0.000000),
    vec3(0.925490, 0.552941, 0.000000),
    vec3(0.764706, 0.392157, 0.000000),
    vec3(0.650980, 0.239216, 0.000000),
    vec3(0.556863, 0.000000, 0.000000),
    vec3(0.356863, 0.000000, 0.000000),
    vec3(0.360784, 0.400000, 0.466667),
    vec3(0.486275, 0.631373, 0.647059),
    vec3(0.541176, 0.768627, 0.756863),
    vec3(0.168627, 0.184314, 0.215686),
    vec3(0.286275, 0.317647, 0.368627),
    vec3(1.000000, 0.870588, 1.000000),
    vec3(1.000000, 0.639216, 1.000000),
    vec3(0.568627, 0.501961, 0.737255),
    vec3(0.564706, 0.364706, 0.737255),
    vec3(0.498039, 0.066667, 0.686275),
    vec3(0.305882, 0.062745, 0.431373),
    vec3(0.176471, 0.062745, 0.239216),
    vec3(1.000000, 0.082353, 1.000000),
    vec3(0.560784, 0.156863, 0.560784),
    vec3(0.380392, 0.200000, 0.380392),
    vec3(1.000000, 0.309804, 1.000000),
    vec3(1.000000, 0.698039, 1.000000),
    vec3(0.000000, 0.047059, 0.223529),
    vec3(0.000000, 0.058824, 0.286275),
    vec3(0.000000, 0.113725, 0.560784),
    vec3(0.000000, 0.168627, 0.831373),
    vec3(0.000000, 0.243137, 1.000000),
    vec3(0.000000, 0.341176, 1.000000),
    vec3(0.000000, 0.541176, 1.000000),
    vec3(0.000000, 0.823529, 1.000000),
    vec3(0.000000, 1.000000, 1.000000),
    vec3(0.023529, 0.968627, 1.000000),
    vec3(0.023529, 0.768627, 1.000000),
    vec3(0.023529, 0.600000, 1.000000),
    vec3(0.019608, 0.427451, 1.000000),
    vec3(0.015686, 0.309804, 0.925490),
    vec3(0.015686, 0.270588, 0.878431),
    vec3(0.015686, 0.211765, 0.803922),
    vec3(0.019608, 1.000000, 0.882353),
    vec3(0.019608, 1.000000, 0.627451),
    vec3(0.019608, 1.000000, 0.505882),
    vec3(0.019608, 1.000000, 0.396078),
    vec3(0.015686, 1.000000, 0.282353),
    vec3(0.015686, 1.000000, 0.211765),
    vec3(0.023529, 0.913725, 0.635294),
    vec3(0.019608, 0.776471, 0.443137),
    vec3(0.015686, 0.682353, 0.345098),
    vec3(0.015686, 0.560784, 0.219608)
);

float distSq(in vec3 a, in vec3 b) {
    vec3 c = a - b;
    return dot(c, c);
}

vec3 applyPalette(in vec3 c, in vec2 iuv) {
    float d = distSq(c, PALETTE_IN[0]);
    vec3 o = vec3(0);
    for (int i = 1; i < PALETTE_SIZE; ++i) {
        float di = distSq(c, PALETTE_IN[i]);
        if (di < d) {
            d = di;
            o = PALETTE_OUT[i];
        }
    }
    return o;
}


void main() {
    vec2 p = uv;
    p.x -= mod(p.x, 1.0 / (screenResolution.x / PIXEL_SIZE));
    p.y -= mod(p.y, 1.0 / (screenResolution.y / PIXEL_SIZE));
    vec3 clr = texture(ppTex, p).xyz;
    clr = applyPalette(clr, uv);
    clr *= 0.5 + 0.5 * pow(16 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 0.2);
    fragColor = vec4(clr, 1);
}